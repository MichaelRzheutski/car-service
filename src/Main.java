/**
 * - [DONE] Хочу иметь возможность получить результаты диагностики и результаты ремонта (сумма ремонта и время).
 * - [DONE] Стоимость услуг зависит от типа услуги и от автомобиля, чем автомобиль свежее и дороже, тем дороже услуга.
 * - [DONE] Чем дороже автомобиль, тем дороже стоимость запчастей.
 * - [DONE] Запчасти могут быть в наличии, а может и нет, можно рандомно выбирать кол-во дней по доставке от 0 до 7.
 * - [DONE] Время выполнения работ нужно считать учитывая время доставки всех запчастей, времени оказания услуг и квалификации мастера.
 * Требования к проекту:
 * - [DONE] Используйте полиморфизм минимум с одним абстрактным классом.
 * - [DONE] Переопределите хотя бы один абстрактный метод.
 * - [DONE] Используйте модификатор protected не менее 3 раз.
 * - [DONE] Переопределить методы из класса Object (toString(), hashcode(), equals()) минимум 3-х классов из вашего проекта.
 * - [DONE] Ваше приложение должно иметь консольный интерфейс, ввод данных нужно реализовать при помощи Scanner. (В зависимости от введённых данных мы должны получать разный результат.)
 * <p>
 * Комментарии и замечания по дз:
 * - [DONE] Вижу в проекте большое кол-во енамов, которые могут быть классами, что позволит создавать объекты,
 * передавать их в методы.
 * - [DONE] enum Cars это не лучший подход, считаю более правильным создавать объекты машин и иметь поле
 * с объектом или коллекцией объектов в классе Customer.
 * - Аналогичная ситуация и с другими енамами, если сделать их классами с правильными полями можно будет
 * упростить меню и алгоритм программы, в методах вычислений не будет switch case,
 * мы будем знать какую машину мы чиним, какие детали есть в наличии и т.д.,
 * методы будут более читабельными и компактными.
 * - Старайтесь передавать объекты или значения в методы и возвращать из них результаты вычислений.
 * - Избавится от объёмной реализации со switch case.
 * 2) Добавить в проект:
 * - [DONE] 5 интерфейсов к существующей иерархии. (Нужно использовать в проекте, не должны быть заготовкой). Если по логике программы вам не нужно 5, то нужно придумать/дописать логику.
 * - [DONE] Final класс, метод, переменную. (минимум по 1шт. , если есть возможность можно больше, нужно использовать их)
 * - [DONE] Static блок, метод, переменную. (минимум по 1шт. , если есть возможность можно больше, нужно использовать их)
 * - [DONE] 3 перегрузки метода
 * - [DONE] Прочитать материалы, прикреплённые к этой дз
 * [Partially] 5 пользовательских исключений (custom exceptions). Использовать их в проекте.
 * [DONE] Обработку исключений двумя способами.
 * [DONE] try-catch с ресурсами.
 * [DONE] Заменить все System.out.println на LOGGER (Даже если у вас уже Maven проект, попробуйте подключить библиотеку без его помощи, используя jar-файл)
 * [DONE] Записывать сообщения нужно в консоль и в файл.
 * Требования к проекту:
 * - [DONE] Используйте полиморфизм минимум с одним абстрактным классом.
 * - [DONE] Переопределите хотя бы один абстрактный метод.
 * - [DONE] Используйте модификатор protected не менее 3 раз.
 * - [DONE] Переопределить методы из класса Object (toString(), hashcode(), equals()) минимум 3-х классов из вашего проекта.
 * - [DONE] Ваше приложение должно иметь консольный интерфейс, ввод данных нужно реализовать при помощи Scanner. (В зависимости от введённых данных мы должны получать разный результат.)
 * <p>
 * Комментарии и замечания по дз:
 * - [DONE] Вижу в проекте большое кол-во енамов, которые могут быть классами, что позволит создавать объекты,
 * передавать их в методы.
 * - [DONE] enum Cars это не лучший подход, считаю более правильным создавать объекты машин и иметь поле
 * с объектом или коллекцией объектов в классе Customer.
 * - [DONE] Аналогичная ситуация и с другими енамами, если сделать их классами с правильными полями можно будет
 * упростить меню и алгоритм программы, в методах вычислений не будет switch case,
 * мы будем знать какую машину мы чиним, какие детали есть в наличии и т.д.,
 * методы будут более читабельными и компактными.
 * - [DONE] Старайтесь передавать объекты или значения в методы и возвращать из них результаты вычислений.
 * 2) Добавить в проект:
 * - [DONE] 5 интерфейсов к существующей иерархии. (Нужно использовать в проекте, не должны быть заготовкой). Если по логике программы вам не нужно 5, то нужно придумать/дописать логику.
 * - [DONE] Final класс, метод, переменную. (минимум по 1шт. , если есть возможность можно больше, нужно использовать их)
 * - [DONE] Static блок, метод, переменную. (минимум по 1шт. , если есть возможность можно больше, нужно использовать их)
 * - [DONE] 3 перегрузки метода
 * - [DONE] Прочитать материалы, прикреплённые к этой дз
 * <p>
 * [DONE] 5 пользовательских исключений (custom exceptions). Использовать их в проекте.
 * [DONE] Обработку исключений двумя способами.
 * [DONE] try-catch с ресурсами.
 * [DONE] Заменить все System.out.println на LOGGER (Даже если у вас уже Maven проект, попробуйте подключить библиотеку без его помощи, используя jar-файл)
 * [DONE] Записывать сообщения нужно в консоль и в файл.
 * <p>
 * Добавить в проект:
 * 5 коллекций.([DONE] 1 Map, [DONE] 1 Set, [DONE] 1 ArrayList, [DONE] 1 LinkedList,
 * последняя на ваш выбор [DONE] 1 LinkedHashSet)
 * Собственную реализацию LinkedList с помощью generic и используйте ее в своем проекте.
 * Создать отдельный класс LinkedList.
 */

/** Требования к проекту:
 * - [DONE] Используйте полиморфизм минимум с одним абстрактным классом.
 * - [DONE] Переопределите хотя бы один абстрактный метод.
 * - [DONE] Используйте модификатор protected не менее 3 раз.
 * - [DONE] Переопределить методы из класса Object (toString(), hashcode(), equals()) минимум 3-х классов из вашего проекта.
 * - [DONE] Ваше приложение должно иметь консольный интерфейс, ввод данных нужно реализовать при помощи Scanner. (В зависимости от введённых данных мы должны получать разный результат.)
 */

/**
 * Комментарии и замечания по дз:
 * - [DONE] Вижу в проекте большое кол-во енамов, которые могут быть классами, что позволит создавать объекты,
 * передавать их в методы.
 * - [DONE] enum Cars это не лучший подход, считаю более правильным создавать объекты машин и иметь поле
 * с объектом или коллекцией объектов в классе Customer.
 * - [DONE] Аналогичная ситуация и с другими енамами, если сделать их классами с правильными полями можно будет
 * упростить меню и алгоритм программы, в методах вычислений не будет switch case,
 * мы будем знать какую машину мы чиним, какие детали есть в наличии и т.д.,
 * методы будут более читабельными и компактными.
 * - [DONE] Старайтесь передавать объекты или значения в методы и возвращать из них результаты вычислений.
 */

/** 2) Добавить в проект:
 * - [DONE] 5 интерфейсов к существующей иерархии. (Нужно использовать в проекте, не должны быть заготовкой). Если по логике программы вам не нужно 5, то нужно придумать/дописать логику.
 * - [DONE] Final класс, метод, переменную. (минимум по 1шт. , если есть возможность можно больше, нужно использовать их)
 * - [DONE] Static блок, метод, переменную. (минимум по 1шт. , если есть возможность можно больше, нужно использовать их)
 * - [DONE] 3 перегрузки метода
 * - [DONE] Прочитать материалы, прикреплённые к этой дз
 */

/**
 * [DONE] 5 пользовательских исключений (custom exceptions). Использовать их в проекте.
 * [DONE] Обработку исключений двумя способами.
 * [DONE] try-catch с ресурсами.
 * [DONE] Заменить все System.out.println на LOGGER (Даже если у вас уже Maven проект, попробуйте подключить библиотеку без его помощи, используя jar-файл)
 * [DONE] Записывать сообщения нужно в консоль и в файл.
 */

/**
 * Добавить в проект:
 * 5 коллекций.([DONE] 1 Map, [DONE] 1 Set, [DONE] 1 ArrayList, [DONE] 1 LinkedList,
 * последняя на ваш выбор [DONE] 1 LinkedHashSet)
 * [DONE] Собственную реализацию LinkedList с помощью generic и используйте ее в своем проекте.
 */

/* TODO:
 *  1. Отставить только вывод 2 нулей после запятой в стоимости автозапчастей.
 *  2. Пофиксить вывод стоимости автозапчастей, после перехода на листы стало добавляться каждый раз.
 *  2. Пофиксить вывод поставки запчастей, если в наличии чтобы не выводился срок поставки.
 *  3. Калькулятор каждый раз плюсует значение к посчитанному, нужно его сбрасывать при новом вызове.
 *  4. Дописать логику с годами для запчастей в calcSparePartCost(), чем старше машина тем дороже запчасть.
 *  5. Полностью переписать кальеклятор расчёта стоимости ремонта calcRepCost().
 *  6. Добавить какой-нибудь несвязанный интерфейс.
 *  7. Передавать в методы вычислений не сканнер а объекты, например машину. Вызывать как статик нормально. Можно создавать сразу в методе сканнер и закрывать.
 *  8. Брать у кастомера поля и передавать в калькулятор.
 */

import exceptions.NotNumberException;
import helpers.menus.AppMainMenu;

// Main: Runner class
public class Main {
    public static void main(String[] args) {
        // Show the AutoService menu
        AppMainMenu appMainMenu = new AppMainMenu();
        try {
            appMainMenu.mainMenu();
        } catch (NotNumberException e) {
            throw new RuntimeException(e);
        }
    }
}
